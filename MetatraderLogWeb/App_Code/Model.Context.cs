//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;

public partial class Entities : DbContext
{
    public Entities()
        : base("name=Entities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public DbSet<ConfigTable> ConfigTables { get; set; }
    public DbSet<DatabaseVersion> DatabaseVersions { get; set; }
    public DbSet<DataLog> DataLogs { get; set; }
    public DbSet<DataLogDetail> DataLogDetails { get; set; }
    public DbSet<DebugLog> DebugLogs { get; set; }
    public DbSet<ProcedureLog> ProcedureLogs { get; set; }
    public DbSet<TradingSession> TradingSessions { get; set; }
    public DbSet<DataAndAggregate> DataAndAggregates { get; set; }
    public DbSet<DataAndDetail> DataAndDetails { get; set; }
    public DbSet<InitialAggregateDetail> InitialAggregateDetails { get; set; }
    public DbSet<XmlDataAndDetail> XmlDataAndDetails { get; set; }
    public DbSet<vwDataToXml> vwDataToXmls { get; set; }
    public DbSet<vwInitialAggregateDetail> vwInitialAggregateDetails { get; set; }
    public DbSet<vwLastMetatraderPartialResultsPost> vwLastMetatraderPartialResultsPosts { get; set; }
    public DbSet<vwLastMetatraderPartialResultsPre> vwLastMetatraderPartialResultsPres { get; set; }
    public DbSet<vwLastMetatraderResultsPre> vwLastMetatraderResultsPres { get; set; }
    public DbSet<vwTradingSession> vwTradingSessions { get; set; }
    public DbSet<vwXmlExtractIntoTable> vwXmlExtractIntoTables { get; set; }

    public virtual int USP_DataLog(string sessionName, string name, string data)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var dataParameter = data != null ?
            new ObjectParameter("Data", data) :
            new ObjectParameter("Data", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DataLog", sessionNameParameter, nameParameter, dataParameter);
    }

    public virtual int USP_DataLogDetail(string sessionName, string name, string detail)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var detailParameter = detail != null ?
            new ObjectParameter("Detail", detail) :
            new ObjectParameter("Detail", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DataLogDetail", sessionNameParameter, nameParameter, detailParameter);
    }

    public virtual int USP_DebugLog(string sessionName, string debugData, Nullable<System.DateTime> debugTime)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var debugDataParameter = debugData != null ?
            new ObjectParameter("DebugData", debugData) :
            new ObjectParameter("DebugData", typeof(string));

        var debugTimeParameter = debugTime.HasValue ?
            new ObjectParameter("DebugTime", debugTime) :
            new ObjectParameter("DebugTime", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DebugLog", sessionNameParameter, debugDataParameter, debugTimeParameter);
    }

    public virtual int USP_DeleteAllSessions()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteAllSessions");
    }

    public virtual int USP_DeleteLastSession(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteLastSession", sessionNameParameter);
    }

    public virtual int USP_DeleteSymbolData(string sessionName, string symbolName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var symbolNameParameter = symbolName != null ?
            new ObjectParameter("SymbolName", symbolName) :
            new ObjectParameter("SymbolName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteSymbolData", sessionNameParameter, symbolNameParameter);
    }

    public virtual int USP_EndProcedureLog(string sessionName, string name)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EndProcedureLog", sessionNameParameter, nameParameter);
    }

    public virtual int USP_EndTradingSession(string name)
    {
        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EndTradingSession", nameParameter);
    }

    public virtual int USP_GetAggregatesFromDetails()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAggregatesFromDetails");
    }

    public virtual ObjectResult<USP_GetConfigTableData_Result> USP_GetConfigTableData()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetConfigTableData_Result>("USP_GetConfigTableData");
    }

    public virtual int USP_GetDataAndDetailsFromSessionId(Nullable<int> sessionId)
    {
        var sessionIdParameter = sessionId.HasValue ?
            new ObjectParameter("SessionId", sessionId) :
            new ObjectParameter("SessionId", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetDataAndDetailsFromSessionId", sessionIdParameter);
    }

    public virtual int USP_GetDataAndDetailsFromSessionName(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetDataAndDetailsFromSessionName", sessionNameParameter);
    }

    public virtual ObjectResult<string> USP_GetLastSymbolOfSimulation(string tradingSessionName)
    {
        var tradingSessionNameParameter = tradingSessionName != null ?
            new ObjectParameter("TradingSessionName", tradingSessionName) :
            new ObjectParameter("TradingSessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetLastSymbolOfSimulation", tradingSessionNameParameter);
    }

    public virtual int USP_GetMetatraderResultsFromAggregates()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetMetatraderResultsFromAggregates");
    }

    public virtual int USP_GetResultsFromSessionId(Nullable<int> sessionId)
    {
        var sessionIdParameter = sessionId.HasValue ?
            new ObjectParameter("SessionId", sessionId) :
            new ObjectParameter("SessionId", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetResultsFromSessionId", sessionIdParameter);
    }

    public virtual int USP_GetResultsFromSessionName(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetResultsFromSessionName", sessionNameParameter);
    }

    public virtual ObjectResult<USP_GetValidTradingSessionsAndQueries_Result> USP_GetValidTradingSessionsAndQueries()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetValidTradingSessionsAndQueries_Result>("USP_GetValidTradingSessionsAndQueries");
    }

    public virtual int USP_MoveDataFromSessionId(Nullable<int> oldTradingSessionId, Nullable<int> newTradingSessionId)
    {
        var oldTradingSessionIdParameter = oldTradingSessionId.HasValue ?
            new ObjectParameter("OldTradingSessionId", oldTradingSessionId) :
            new ObjectParameter("OldTradingSessionId", typeof(int));

        var newTradingSessionIdParameter = newTradingSessionId.HasValue ?
            new ObjectParameter("NewTradingSessionId", newTradingSessionId) :
            new ObjectParameter("NewTradingSessionId", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MoveDataFromSessionId", oldTradingSessionIdParameter, newTradingSessionIdParameter);
    }

    public virtual int USP_MoveDataFromSessionName(string oldTradingSessionName, string newTradingSessionName)
    {
        var oldTradingSessionNameParameter = oldTradingSessionName != null ?
            new ObjectParameter("OldTradingSessionName", oldTradingSessionName) :
            new ObjectParameter("OldTradingSessionName", typeof(string));

        var newTradingSessionNameParameter = newTradingSessionName != null ?
            new ObjectParameter("NewTradingSessionName", newTradingSessionName) :
            new ObjectParameter("NewTradingSessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MoveDataFromSessionName", oldTradingSessionNameParameter, newTradingSessionNameParameter);
    }

    public virtual int USP_NewTradingSession(string name)
    {
        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_NewTradingSession", nameParameter);
    }

    public virtual ObjectResult<USP_ReadLastDataLog_Result> USP_ReadLastDataLog(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadLastDataLog_Result>("USP_ReadLastDataLog", sessionNameParameter);
    }

    public virtual ObjectResult<USP_ReadLastDataLogAndDetail_Result> USP_ReadLastDataLogAndDetail(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadLastDataLogAndDetail_Result>("USP_ReadLastDataLogAndDetail", sessionNameParameter);
    }

    public virtual ObjectResult<USP_ReadLastDataLogDetail_Result> USP_ReadLastDataLogDetail(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadLastDataLogDetail_Result>("USP_ReadLastDataLogDetail", sessionNameParameter);
    }

    public virtual ObjectResult<USP_ReadLastProcedureLog_Result> USP_ReadLastProcedureLog(string sessionName)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadLastProcedureLog_Result>("USP_ReadLastProcedureLog", sessionNameParameter);
    }

    public virtual ObjectResult<USP_ReadResult_Result> USP_ReadResult(Nullable<long> orderNo)
    {
        var orderNoParameter = orderNo.HasValue ?
            new ObjectParameter("OrderNo", orderNo) :
            new ObjectParameter("OrderNo", typeof(long));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadResult_Result>("USP_ReadResult", orderNoParameter);
    }

    public virtual ObjectResult<USP_ReadResultFromSymbol_Result> USP_ReadResultFromSymbol(string symbol)
    {
        var symbolParameter = symbol != null ?
            new ObjectParameter("Symbol", symbol) :
            new ObjectParameter("Symbol", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadResultFromSymbol_Result>("USP_ReadResultFromSymbol", symbolParameter);
    }

    public virtual ObjectResult<USP_ReadResults_Result> USP_ReadResults()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ReadResults_Result>("USP_ReadResults");
    }

    public virtual int USP_StartProcedureLog(string sessionName, string name, string paramsToString)
    {
        var sessionNameParameter = sessionName != null ?
            new ObjectParameter("SessionName", sessionName) :
            new ObjectParameter("SessionName", typeof(string));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var paramsToStringParameter = paramsToString != null ?
            new ObjectParameter("ParamsToString", paramsToString) :
            new ObjectParameter("ParamsToString", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_StartProcedureLog", sessionNameParameter, nameParameter, paramsToStringParameter);
    }

    public virtual ObjectResult<string> USP_ValidateData()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_ValidateData");
    }
}
